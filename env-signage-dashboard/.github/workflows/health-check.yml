name: Health Check and Deploy

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '*/15 * * * *'  # 15分毎にヘルスチェック実行
  workflow_dispatch:

jobs:
  health-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Validate JSON configuration files
        run: |
          echo "Validating configuration files..."
          
          # wiki-sources.json の検証
          if [ -f "config/wiki-sources.json" ]; then
            echo "Validating wiki-sources.json..."
            jq empty config/wiki-sources.json || exit 1
            echo "✓ wiki-sources.json is valid"
          else
            echo "⚠ wiki-sources.json not found"
          fi
          
          # environments.json の検証
          if [ -f "config/environments.json" ]; then
            echo "Validating environments.json..."
            jq empty config/environments.json || exit 1
            echo "✓ environments.json is valid"
          else
            echo "⚠ environments.json not found"
          fi
          
          # wiki-cache.json の検証（存在する場合）
          if [ -f "data/wiki-cache.json" ]; then
            echo "Validating wiki-cache.json..."
            jq empty data/wiki-cache.json || exit 1
            echo "✓ wiki-cache.json is valid"
          else
            echo "ℹ wiki-cache.json not found (will be created by wiki fetch)"
          fi

      - name: Test JavaScript syntax
        run: |
          echo "Testing JavaScript files..."
          
          for js_file in js/*.js scripts/*.js; do
            if [ -f "$js_file" ]; then
              echo "Checking $js_file..."
              node -c "$js_file" || exit 1
              echo "✓ $js_file syntax is valid"
            fi
          done

      - name: Validate HTML structure
        run: |
          echo "Validating HTML structure..."
          
          if [ -f "index.html" ]; then
            # 基本的なHTML構造チェック
            grep -q "<!DOCTYPE html>" index.html || (echo "✗ Missing DOCTYPE" && exit 1)
            grep -q "<html" index.html || (echo "✗ Missing html tag" && exit 1)
            grep -q "<head>" index.html || (echo "✗ Missing head tag" && exit 1)
            grep -q "<body>" index.html || (echo "✗ Missing body tag" && exit 1)
            echo "✓ HTML structure is valid"
          else
            echo "✗ index.html not found"
            exit 1
          fi

      - name: Check CSS files
        run: |
          echo "Checking CSS files..."
          
          for css_file in css/*.css; do
            if [ -f "$css_file" ]; then
              echo "Checking $css_file..."
              # 基本的なCSS構文チェック（中括弧のバランス）
              if [ $(grep -o '{' "$css_file" | wc -l) -eq $(grep -o '}' "$css_file" | wc -l) ]; then
                echo "✓ $css_file braces are balanced"
              else
                echo "✗ $css_file has unbalanced braces"
                exit 1
              fi
            fi
          done

      - name: Test environment data structure
        run: |
          echo "Testing environment data structure..."
          
          if [ -f "data/wiki-cache.json" ]; then
            # 必須フィールドの存在確認
            jq -e '.environments' data/wiki-cache.json > /dev/null || (echo "✗ Missing environments array" && exit 1)
            jq -e '.last_updated' data/wiki-cache.json > /dev/null || (echo "✗ Missing last_updated field" && exit 1)
            
            # 各環境の必須フィールド確認
            jq -e '.environments[] | select(.id and .name)' data/wiki-cache.json > /dev/null || (echo "✗ Some environments missing id or name" && exit 1)
            
            echo "✓ Environment data structure is valid"
          else
            echo "ℹ No wiki-cache.json to validate"
          fi

      - name: Simulate health checks
        run: |
          echo "Simulating health checks..."
          
          # 設定ファイルから環境URLを取得してヘルスチェックを実行
          if [ -f "data/wiki-cache.json" ]; then
            echo "Testing configured environments..."
            
            # 公開URLのみテスト（localhost等は除外）
            urls=$(jq -r '.environments[]? | select(.url and (.url | test("^https?://(?!localhost|127\\.0\\.0\\.1|0\\.0\\.0\\.0).*"))) | .url' data/wiki-cache.json 2>/dev/null || echo "")
            
            if [ -n "$urls" ]; then
              echo "Found URLs to test: $(echo "$urls" | wc -l)"
              for url in $urls; do
                echo "Testing $url..."
                # タイムアウト付きでHTTPステータスのみチェック
                status=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "$url" || echo "timeout")
                echo "  Status: $status"
              done
            else
              echo "No public URLs found to test"
            fi
          else
            echo "No environment data available for testing"
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: health-check
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  notify:
    runs-on: ubuntu-latest
    needs: [health-check, deploy]
    if: always()
    
    steps:
      - name: Health Check Summary
        run: |
          echo "## Health Check Results" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.health-check.result }}" == "success" ]; then
            echo "✅ Health checks passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Health checks failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Deployment successful" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy.result }}" == "skipped" ]; then
            echo "⏭️ Deployment skipped (not main branch)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY